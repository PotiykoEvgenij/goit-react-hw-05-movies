{"version":3,"file":"static/js/828.5f5fa712.chunk.js","mappings":"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","sources":["components/Api.js","components/Cast.jsx","components/Reviews.jsx","pages/MoviesDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport default class MovieAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://api.themoviedb.org/3';\n  }\n\n  async getTrendingMovies() {\n    const url = `${this.baseURL}/trending/movie/day`;\n    const config = {\n      params: {\n        api_key: this.apiKey,\n        language: 'en-US',\n      },\n    };\n\n    const response = await axios.get(url, config);\n    console.log(response.data.results);\n    return response.data.results;\n  }\n\n  async searchMovies(query) {\n    const url = `${this.baseURL}/search/movie`;\n    const config = {\n      params: {\n        api_key: this.apiKey,\n        language: 'en-US',\n        query: query,\n      },\n    };\n\n    const response = await axios.get(url, config);\n    return response.data.results;\n  }\n\n  async getMovieDetails(movieId) {\n    const url = `${this.baseURL}/movie/${movieId}`;\n    const config = {\n      params: {\n        api_key: this.apiKey,\n        language: 'en-US',\n      },\n    };\n\n    const response = await axios.get(url, config);\n    return response.data;\n  }\n\n  async getMovieCredits(movieId) {\n    const url = `${this.baseURL}/movie/${movieId}/credits`;\n    const config = {\n      params: {\n        api_key: this.apiKey,\n      },\n    };\n\n    const response = await axios.get(url, config);\n    return response.data;\n  }\n\n  async getMovieReviews(movieId) {\n    const url = `${this.baseURL}/movie/${movieId}/reviews`;\n    const config = {\n      params: {\n        api_key: this.apiKey,\n        language: 'en-US',\n      },\n    };\n\n    const response = await axios.get(url, config);\n    return response.data.results;\n  }\n}","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MovieAPI from 'components/Api';\n\nconst Cast = ({ movieId }) => {\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        const movieAPI = new MovieAPI('a2eec4063d87f4e8e5e4230e87b07946');\n        const cast = await movieAPI.getMovieCredits(movieId);\n        setCast(cast.cast);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchMovieCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h3>Cast</h3>\n      <ul>\n        {cast.map((actor) => (\n          <li key={actor.id}>\n            <img src={`https://image.tmdb.org/t/p/w185/${actor.profile_path}`} alt={actor.name} />\n            <p>{actor.name}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\n\nexport default Cast;","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MovieAPI from 'components/Api';\n\nconst Reviews = ({ movieId }) => {\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        const movieAPI = new MovieAPI('a2eec4063d87f4e8e5e4230e87b07946');\n        const reviews = await movieAPI.getMovieReviews(movieId);\n        setReviews(reviews);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchMovieReviews();\n  }, [movieId]);\n\n  if (reviews.length === 0) {\n    return <div>We don't have reviews for this movie.</div>;\n  }\n\n  return (\n    <div>\n      <h3>Reviews</h3>\n      <ul>\n        {reviews.map((review) => (\n          <li key={review.id}>\n            <p>{review.author}</p>\n            <p>{review.content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nReviews.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\n\nexport default Reviews;","import React, { useEffect, useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport MovieAPI from 'components/Api';\nimport Cast from 'components/Cast';\nimport Reviews from 'components/Reviews';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const movieId = location.state?.movieId;\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [genres, setGenres] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const movieAPI = new MovieAPI('a2eec4063d87f4e8e5e4230e87b07946');\n        const details = await movieAPI.getMovieDetails(movieId);\n        const genreNames = details.genres.map((genre) => genre.name);\n        const reviews = await movieAPI.getMovieReviews(movieId);\n        setMovieDetails(details);\n        setGenres(genreNames);\n        setReviews(reviews);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    if (movieId) {\n      fetchData();\n    }\n  }, [movieId]);\n\n  if (!movieDetails) {\n    return <div>Loading...</div>;\n  }\n\n  const renderGenres = () => {\n    return genres.map((genre, index) => (\n      <span key={index} className=\"genre\">\n        {genre}\n      </span>\n    ));\n  };\n\n  const renderAdditionalInformation = () => {\n    return (\n      <div>\n        <h3>Additional Information</h3>\n        <ul>\n          <li>\n            <Link to={{ pathname: `/movies/${movieId}/cast`, state: { movieId } }}>Cast</Link>\n          </li>\n          {reviews.length > 0 ? (\n            <li>\n              <Link to={{ pathname: `/movies/${movieId}/reviews`, state: { movieId } }}>Reviews</Link>\n            </li>\n          ) : (\n            <li>We don't have reviews for this movie.</li>\n          )}\n        </ul>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Link to={location.state?.from}>Go back</Link>\n      <img src={`https://image.tmdb.org/t/p/w185/${movieDetails.poster_path}`} alt={movieDetails.title} />\n      <h1>{movieDetails.title} ({movieDetails.release_date.slice(0, 4)})</h1>\n      <p>User score: {movieDetails.vote_average}</p>\n      <h2>Overview</h2>\n      <p>{movieDetails.overview}</p>\n      <h2>Genres</h2>\n      <div className=\"genres\">{renderGenres()}</div>\n      {renderAdditionalInformation()}\n      {location.pathname === `/movies/${movieId}/cast` && <Cast movieId={movieId} />}\n      {location.pathname === `/movies/${movieId}/reviews` && <Reviews movieId={movieId} />}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["MovieAPI","apiKey","this","baseURL","url","config","params","api_key","language","axios","response","console","log","data","results","query","movieId","useState","cast","setCast","useEffect","fetchMovieCast","movieAPI","getMovieCredits","error","map","actor","src","profile_path","alt","name","id","reviews","setReviews","fetchMovieReviews","getMovieReviews","length","review","author","content","location","useLocation","state","movieDetails","setMovieDetails","genres","setGenres","fetchData","getMovieDetails","details","genreNames","genre","to","from","poster_path","title","release_date","slice","vote_average","overview","className","index","pathname"],"sourceRoot":""}