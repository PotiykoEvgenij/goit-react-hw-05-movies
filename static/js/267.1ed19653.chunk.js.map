{"version":3,"file":"static/js/267.1ed19653.chunk.js","mappings":"gOAEqBA,EAAAA,WACnB,WAAYC,IAAS,eACnBC,KAAKD,OAASA,EACdC,KAAKC,QAAU,8BAChB,CAsDD,OAtDC,4EAED,+FACQC,EADR,UACiBF,KAAKC,QADtB,uBAEQE,EAAS,CACbC,OAAQ,CACNC,QAASL,KAAKD,OACdO,SAAU,UALhB,SASyBC,EAAAA,EAAAA,IAAUL,EAAKC,GATxC,cASQK,EATR,yBAUSA,EAASC,KAAKC,SAVvB,kGAFC,IAED,6DAaA,WAAmBC,GAAnB,kFACQT,EADR,UACiBF,KAAKC,QADtB,iBAEQE,EAAS,CACbC,OAAQ,CACNC,QAASL,KAAKD,OACdO,SAAU,QACVK,MAAOA,IANb,SAUyBJ,EAAAA,EAAAA,IAAUL,EAAKC,GAVxC,cAUQK,EAVR,yBAWSA,EAASC,KAAKC,SAXvB,mGAbA,IAaA,gEAcA,WAAsBE,GAAtB,kFACQV,EADR,UACiBF,KAAKC,QADtB,kBACuCW,GAC/BT,EAAS,CACbC,OAAQ,CACNC,QAASL,KAAKD,OACdO,SAAU,UALhB,SASyBC,EAAAA,EAAAA,IAAUL,EAAKC,GATxC,cASQK,EATR,yBAUSA,EAASC,MAVlB,mGAdA,IAcA,gEAaA,WAAsBG,GAAtB,kFACQV,EADR,UACiBF,KAAKC,QADtB,kBACuCW,EADvC,YAEQT,EAAS,CACbC,OAAQ,CACNC,QAASL,KAAKD,SAJpB,SAQyBQ,EAAAA,EAAAA,IAAUL,EAAKC,GARxC,cAQQK,EARR,yBASSA,EAASC,MATlB,mGAbA,IAaA,gEAYA,WAAsBG,GAAtB,kFACQV,EADR,UACiBF,KAAKC,QADtB,kBACuCW,EADvC,YAEQT,EAAS,CACbC,OAAQ,CACNC,QAASL,KAAKD,OACdO,SAAU,UALhB,SASyBC,EAAAA,EAAAA,IAAUL,EAAKC,GATxC,cASQK,EATR,yBAUSA,EAASC,KAAKC,SAVvB,mGAZA,MAYA,EA1DmBZ,E,2FCERe,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OAAKF,GAKH,wBACGA,EAAOG,KAAI,SAACC,GAAD,OACV,yBACE,UAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAET,QAASM,EAAME,GAAIE,KAAMP,GAAnE,WACE,gBAAKQ,IAAG,0CAAqCL,EAAMM,aAAeC,IAAKP,EAAMQ,SAC7E,wBAAKR,EAAMS,qBAHNT,EAAME,GADL,MALP,IAeV,C,6HCpBYQ,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOnB,EAAP,KAAcoB,EAAd,KAUA,OACE,4BACE,kBAAOC,KAAK,OAAOC,MAAOtB,EAAOuB,SAVX,SAACC,GACzBJ,EAASI,EAAMC,OAAOH,MACvB,KASG,mBAAQI,QAPS,WACnBR,EAASlB,EACV,EAKG,sBAGL,E,SCfK2B,EAAW,I,OAAIxC,GAAS,oCAiB9B,EAfe,WACb,OAA4BgC,EAAAA,EAAAA,UAAS,IAArC,eAAOhB,EAAP,KAAeyB,EAAf,KAEMC,EAAY,mCAAG,WAAO7B,GAAP,uFACS2B,EAASE,aAAa7B,GAD/B,OACb8B,EADa,OAEnBF,EAAUE,GAFS,2CAAH,sDAIlB,OACE,4BACE,SAACb,EAAD,CAAWC,SAAUW,KACrB,SAAC3B,EAAA,EAAD,CAAYC,OAAQA,MAGzB,C","sources":["components/Api.js","components/MoviesList.jsx","components/SearchBox.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport default class MovieAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://api.themoviedb.org/3';\n  }\n\n  async getTrendingMovies() {\n    const url = `${this.baseURL}/trending/movie/day`;\n    const config = {\n      params: {\n        api_key: this.apiKey,\n        language: 'en-US',\n      },\n    };\n\n    const response = await axios.get(url, config);\n    return response.data.results;\n  }\n\n  async searchMovies(query) {\n    const url = `${this.baseURL}/search/movie`;\n    const config = {\n      params: {\n        api_key: this.apiKey,\n        language: 'en-US',\n        query: query,\n      },\n    };\n\n    const response = await axios.get(url, config);\n    return response.data.results;\n  }\n\n  async getMovieDetails(movieId) {\n    const url = `${this.baseURL}/movie/${movieId}`;\n    const config = {\n      params: {\n        api_key: this.apiKey,\n        language: 'en-US',\n      },\n    };\n\n    const response = await axios.get(url, config);\n    return response.data;\n  }\n\n  async getMovieCredits(movieId) {\n    const url = `${this.baseURL}/movie/${movieId}/credits`;\n    const config = {\n      params: {\n        api_key: this.apiKey,\n      },\n    };\n\n    const response = await axios.get(url, config);\n    return response.data;\n  }\n\n  async getMovieReviews(movieId) {\n    const url = `${this.baseURL}/movie/${movieId}/reviews`;\n    const config = {\n      params: {\n        api_key: this.apiKey,\n        language: 'en-US',\n      },\n    };\n\n    const response = await axios.get(url, config);\n    return response.data.results;\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  if (!movies) {\n    return null;\n  }\n\n  return (\n    <ul>\n      {movies.map((movie) => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ movieId: movie.id, from: location }}>\n            <img src={`https://image.tmdb.org/t/p/w185/${movie.poster_path}`} alt={movie.title} />\n            <h2>{movie.original_title}</h2>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n      original_title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;","import React, { useState }  from 'react';\n// import PropTypes from 'prop-types';\n\nexport const SearchBox = ({ onSearch }) => {\n  const [query, setQuery] = useState('');\n\n  const handleInputChange = (event) => {\n    setQuery(event.target.value);\n  };\n\n  const handleSearch = () => {\n    onSearch(query);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={query} onChange={handleInputChange} />\n      <button onClick={handleSearch}>Search</button>\n    </div>\n  );\n};","import React, { useState } from \"react\";\nimport { SearchBox } from \"components/SearchBox\";\nimport { MoviesList } from \"../components/MoviesList\";\nimport MovieAPI from \"../components/Api\";\n\nconst movieAPI = new MovieAPI('a2eec4063d87f4e8e5e4230e87b07946');\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n\n  const searchMovies = async (query) => {\n    const searchResults = await movieAPI.searchMovies(query);\n    setMovies(searchResults);\n  };\n  return (\n    <div>\n      <SearchBox onSearch={searchMovies} />\n      <MoviesList movies={movies} />\n    </div>\n  );\n};\n\nexport default Movies;"],"names":["MovieAPI","apiKey","this","baseURL","url","config","params","api_key","language","axios","response","data","results","query","movieId","MoviesList","movies","location","useLocation","map","movie","to","id","state","from","src","poster_path","alt","title","original_title","SearchBox","onSearch","useState","setQuery","type","value","onChange","event","target","onClick","movieAPI","setMovies","searchMovies","searchResults"],"sourceRoot":""}